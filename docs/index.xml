<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小飞侠的后花园</title>
    <link>http://yurneroma.github.io/</link>
    <description>Recent content on 小飞侠的后花园</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Jan 2023 23:40:47 +0800</lastBuildDate>
    <atom:link href="http://yurneroma.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bitwise_invert</title>
      <link>http://yurneroma.github.io/posts/bitwise_invert/</link>
      <pubDate>Sun, 29 Jan 2023 23:40:47 +0800</pubDate>
      <guid>http://yurneroma.github.io/posts/bitwise_invert/</guid>
      <description>jieshao aaaaa&#xA;Description Write a function invert(x,p,n) that returns x with the n bits that begin at position p inverted (i.e., 1 changed into 0 and vice versa), leaving the others unchanged.&#xA;input unsigned x = 0b00000100; output res = 0b000001010;&#xA;solution code #include &amp;lt;stdio.h&amp;gt; unsigned invert(unsigned x, int p, int n) { // 1. clear n bits of x to zero unsigned a = x &amp;amp; ~(~(~0 &amp;lt;&amp;lt; n) &amp;lt;&amp;lt; (p + 1 - n)); unsigned invert_nbits = ~(x &amp;gt;&amp;gt; (p + 1 - n)) &amp;amp; ~(~0 &amp;lt;&amp;lt; n); return a | invert_nbits &amp;lt;&amp;lt; (p + 1 - n); } void print(unsigned x) { for (int i = 8; i &amp;gt;= 0; --i) { printf(&amp;#34;%d&amp;#34;, (x &amp;gt;&amp;gt; i) &amp;amp; 1); } printf(&amp;#34;\n&amp;#34;); } int main() { unsigned x = 0b00000100; unsigned res = invert(x, 3, 3); print(res); } </description>
    </item>
    <item>
      <title>位运算-用Y的最右n位设置X的从p开始的n位</title>
      <link>http://yurneroma.github.io/posts/setbits/</link>
      <pubDate>Sat, 28 Jan 2023 18:15:54 +0800</pubDate>
      <guid>http://yurneroma.github.io/posts/setbits/</guid>
      <description>Description Write a function setbits(x,p,n,y) that returns x with the n bits that begin at position p set to the rightmost n bits of y, leaving the other bits unchanged.&#xA;example: x = 00001110; y = 10101011; n = 3 p = 3&#xA;code unsigned setbits(unsigned x, int p, int n, unsigned y) { // before &amp;#34;|&amp;#34; symbol, set n bits of x to zero // after &amp;#34;|&amp;#34; symbol, get rightmost n bits of y, clear the other bits of y, and // move n bits to position P // bitwise 重要性质: // - 0 OR N == N // - 0 AND N == 0 // 1 OR N == N bits 1 // 1 AND N == N return x &amp;amp; ~(~(~0 &amp;lt;&amp;lt; n) &amp;lt;&amp;lt; (p + 1 - n)) | (y &amp;amp; ~(~0 &amp;lt;&amp;lt; n)) &amp;lt;&amp;lt; (p + 1 - n); } void print(unsigned x) { for (int i = 31; i &amp;gt;= 0; --i) { printf(&amp;#34;%d&amp;#34;, (x &amp;gt;&amp;gt; i) &amp;amp; 1); } printf(&amp;#34;\n&amp;#34;); } int main() { unsigned x = 0b00001110; unsigned y = 0b10101011; int n = 3, p = 3; int res = setbits(x, p, n, y); print(res); } Solution </description>
    </item>
    <item>
      <title>概率论 贝叶斯公式及蒙提霍尔悖论</title>
      <link>http://yurneroma.github.io/posts/%E6%A6%82%E7%8E%87%E8%AE%BA-%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%85%AC%E5%BC%8F%E5%8F%8A%E8%92%99%E6%8F%90%E9%9C%8D%E5%B0%94%E6%82%96%E8%AE%BA/</link>
      <pubDate>Mon, 23 Jan 2023 10:08:06 +0800</pubDate>
      <guid>http://yurneroma.github.io/posts/%E6%A6%82%E7%8E%87%E8%AE%BA-%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%85%AC%E5%BC%8F%E5%8F%8A%E8%92%99%E6%8F%90%E9%9C%8D%E5%B0%94%E6%82%96%E8%AE%BA/</guid>
      <description>贝叶斯公式 蒙提霍尔问题 描述 The Monty Hall Problem. This is a much discussed puzzle, based on an old American game show. You are told that a prize is equally likely to be found behind any one of three closed doors in front of you. You point to one of the doors. A friend opens for you one of the remaining two doors, after making sure that the prize is not behind it.</description>
    </item>
  </channel>
</rss>
